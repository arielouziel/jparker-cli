/*
 * JParker REST API
 * An Open API for parking lot management
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@arielouziel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aouziel.jparker.client.api;

import com.aouziel.jparker.client.invoker.ApiCallback;
import com.aouziel.jparker.client.invoker.ApiClient;
import com.aouziel.jparker.client.invoker.ApiException;
import com.aouziel.jparker.client.invoker.ApiResponse;
import com.aouziel.jparker.client.invoker.Configuration;
import com.aouziel.jparker.client.invoker.Pair;
import com.aouziel.jparker.client.invoker.ProgressRequestBody;
import com.aouziel.jparker.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aouziel.jparker.client.model.ParkingLot;
import com.aouziel.jparker.client.model.ParkingSlot;
import com.aouziel.jparker.client.model.ParkingTicket;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ParkingLotControllerApi {
    private ApiClient apiClient;

    public ParkingLotControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ParkingLotControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createParkingLotUsingPOST
     * @param parkingLot parkingLot (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createParkingLotUsingPOSTCall(ParkingLot parkingLot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parkingLot;

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createParkingLotUsingPOSTValidateBeforeCall(ParkingLot parkingLot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parkingLot' is set
        if (parkingLot == null) {
            throw new ApiException("Missing the required parameter 'parkingLot' when calling createParkingLotUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createParkingLotUsingPOSTCall(parkingLot, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new parking lot
     * 
     * @param parkingLot parkingLot (required)
     * @return ParkingLot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParkingLot createParkingLotUsingPOST(ParkingLot parkingLot) throws ApiException {
        ApiResponse<ParkingLot> resp = createParkingLotUsingPOSTWithHttpInfo(parkingLot);
        return resp.getData();
    }

    /**
     * Create a new parking lot
     * 
     * @param parkingLot parkingLot (required)
     * @return ApiResponse&lt;ParkingLot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParkingLot> createParkingLotUsingPOSTWithHttpInfo(ParkingLot parkingLot) throws ApiException {
        com.squareup.okhttp.Call call = createParkingLotUsingPOSTValidateBeforeCall(parkingLot, null, null);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new parking lot (asynchronously)
     * 
     * @param parkingLot parkingLot (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createParkingLotUsingPOSTAsync(ParkingLot parkingLot, final ApiCallback<ParkingLot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createParkingLotUsingPOSTValidateBeforeCall(parkingLot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createParkingSlotUsingPOST
     * @param lotId ParkingLot id where to add the slot (required)
     * @param parkingSlot slot (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createParkingSlotUsingPOSTCall(Long lotId, ParkingSlot parkingSlot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parkingSlot;

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/slots"
            .replaceAll("\\{" + "lotId" + "\\}", apiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createParkingSlotUsingPOSTValidateBeforeCall(Long lotId, ParkingSlot parkingSlot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling createParkingSlotUsingPOST(Async)");
        }
        
        // verify the required parameter 'parkingSlot' is set
        if (parkingSlot == null) {
            throw new ApiException("Missing the required parameter 'parkingSlot' when calling createParkingSlotUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createParkingSlotUsingPOSTCall(lotId, parkingSlot, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new slot in a parking lot
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param parkingSlot slot (required)
     * @return ParkingSlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParkingSlot createParkingSlotUsingPOST(Long lotId, ParkingSlot parkingSlot) throws ApiException {
        ApiResponse<ParkingSlot> resp = createParkingSlotUsingPOSTWithHttpInfo(lotId, parkingSlot);
        return resp.getData();
    }

    /**
     * Create a new slot in a parking lot
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param parkingSlot slot (required)
     * @return ApiResponse&lt;ParkingSlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParkingSlot> createParkingSlotUsingPOSTWithHttpInfo(Long lotId, ParkingSlot parkingSlot) throws ApiException {
        com.squareup.okhttp.Call call = createParkingSlotUsingPOSTValidateBeforeCall(lotId, parkingSlot, null, null);
        Type localVarReturnType = new TypeToken<ParkingSlot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new slot in a parking lot (asynchronously)
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param parkingSlot slot (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createParkingSlotUsingPOSTAsync(Long lotId, ParkingSlot parkingSlot, final ApiCallback<ParkingSlot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createParkingSlotUsingPOSTValidateBeforeCall(lotId, parkingSlot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParkingSlot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enterParkingLotUsingPOST
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param body carPowerType (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enterParkingLotUsingPOSTCall(Long lotId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/slot-uses"
            .replaceAll("\\{" + "lotId" + "\\}", apiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enterParkingLotUsingPOSTValidateBeforeCall(Long lotId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling enterParkingLotUsingPOST(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling enterParkingLotUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = enterParkingLotUsingPOSTCall(lotId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Put a car in a any free parking slot
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param body carPowerType (required)
     * @return ParkingTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParkingTicket enterParkingLotUsingPOST(Long lotId, String body) throws ApiException {
        ApiResponse<ParkingTicket> resp = enterParkingLotUsingPOSTWithHttpInfo(lotId, body);
        return resp.getData();
    }

    /**
     * Put a car in a any free parking slot
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param body carPowerType (required)
     * @return ApiResponse&lt;ParkingTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParkingTicket> enterParkingLotUsingPOSTWithHttpInfo(Long lotId, String body) throws ApiException {
        com.squareup.okhttp.Call call = enterParkingLotUsingPOSTValidateBeforeCall(lotId, body, null, null);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Put a car in a any free parking slot (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param body carPowerType (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enterParkingLotUsingPOSTAsync(Long lotId, String body, final ApiCallback<ParkingTicket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enterParkingLotUsingPOSTValidateBeforeCall(lotId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllParkingLotsUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllParkingLotsUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllParkingLotsUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllParkingLotsUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * View a list of all parking lots
     * 
     * @return List&lt;ParkingLot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ParkingLot> getAllParkingLotsUsingGET() throws ApiException {
        ApiResponse<List<ParkingLot>> resp = getAllParkingLotsUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * View a list of all parking lots
     * 
     * @return ApiResponse&lt;List&lt;ParkingLot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ParkingLot>> getAllParkingLotsUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllParkingLotsUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ParkingLot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View a list of all parking lots (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllParkingLotsUsingGETAsync(final ApiCallback<List<ParkingLot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllParkingLotsUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ParkingLot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParkingLotByIdUsingGET
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParkingLotByIdUsingGETCall(Long lotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}"
            .replaceAll("\\{" + "lotId" + "\\}", apiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParkingLotByIdUsingGETValidateBeforeCall(Long lotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling getParkingLotByIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getParkingLotByIdUsingGETCall(lotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a parking lot by Id
     * 
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @return ParkingLot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParkingLot getParkingLotByIdUsingGET(Long lotId) throws ApiException {
        ApiResponse<ParkingLot> resp = getParkingLotByIdUsingGETWithHttpInfo(lotId);
        return resp.getData();
    }

    /**
     * Get a parking lot by Id
     * 
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @return ApiResponse&lt;ParkingLot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParkingLot> getParkingLotByIdUsingGETWithHttpInfo(Long lotId) throws ApiException {
        com.squareup.okhttp.Call call = getParkingLotByIdUsingGETValidateBeforeCall(lotId, null, null);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a parking lot by Id (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParkingLotByIdUsingGETAsync(Long lotId, final ApiCallback<ParkingLot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParkingLotByIdUsingGETValidateBeforeCall(lotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for leaveParkingLotUsingPUT
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call leaveParkingLotUsingPUTCall(Long lotId, String ticketNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/tickets/{ticketNumber}/leave"
            .replaceAll("\\{" + "lotId" + "\\}", apiClient.escapeString(lotId.toString()))
            .replaceAll("\\{" + "ticketNumber" + "\\}", apiClient.escapeString(ticketNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call leaveParkingLotUsingPUTValidateBeforeCall(Long lotId, String ticketNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling leaveParkingLotUsingPUT(Async)");
        }
        
        // verify the required parameter 'ticketNumber' is set
        if (ticketNumber == null) {
            throw new ApiException("Missing the required parameter 'ticketNumber' when calling leaveParkingLotUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = leaveParkingLotUsingPUTCall(lotId, ticketNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove car from parking lot and bill the customer
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @return ParkingTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParkingTicket leaveParkingLotUsingPUT(Long lotId, String ticketNumber) throws ApiException {
        ApiResponse<ParkingTicket> resp = leaveParkingLotUsingPUTWithHttpInfo(lotId, ticketNumber);
        return resp.getData();
    }

    /**
     * Remove car from parking lot and bill the customer
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @return ApiResponse&lt;ParkingTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParkingTicket> leaveParkingLotUsingPUTWithHttpInfo(Long lotId, String ticketNumber) throws ApiException {
        com.squareup.okhttp.Call call = leaveParkingLotUsingPUTValidateBeforeCall(lotId, ticketNumber, null, null);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove car from parking lot and bill the customer (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call leaveParkingLotUsingPUTAsync(Long lotId, String ticketNumber, final ApiCallback<ParkingTicket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = leaveParkingLotUsingPUTValidateBeforeCall(lotId, ticketNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listFreeParkingSlotsUsingGET
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listFreeParkingSlotsUsingGETCall(Long lotId, String parkingSlotStatus, String parkingSlotType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/slots"
            .replaceAll("\\{" + "lotId" + "\\}", apiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parkingSlotStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("parkingSlotStatus", parkingSlotStatus));
        }

        if (parkingSlotType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("parkingSlotType", parkingSlotType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFreeParkingSlotsUsingGETValidateBeforeCall(Long lotId, String parkingSlotStatus, String parkingSlotType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling listFreeParkingSlotsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listFreeParkingSlotsUsingGETCall(lotId, parkingSlotStatus, parkingSlotType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of free slots in a parking lot
     * 
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @return List&lt;ParkingSlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ParkingSlot> listFreeParkingSlotsUsingGET(Long lotId, String parkingSlotStatus, String parkingSlotType) throws ApiException {
        ApiResponse<List<ParkingSlot>> resp = listFreeParkingSlotsUsingGETWithHttpInfo(lotId, parkingSlotStatus, parkingSlotType);
        return resp.getData();
    }

    /**
     * Get a list of free slots in a parking lot
     * 
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @return ApiResponse&lt;List&lt;ParkingSlot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ParkingSlot>> listFreeParkingSlotsUsingGETWithHttpInfo(Long lotId, String parkingSlotStatus, String parkingSlotType) throws ApiException {
        com.squareup.okhttp.Call call = listFreeParkingSlotsUsingGETValidateBeforeCall(lotId, parkingSlotStatus, parkingSlotType, null, null);
        Type localVarReturnType = new TypeToken<List<ParkingSlot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of free slots in a parking lot (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFreeParkingSlotsUsingGETAsync(Long lotId, String parkingSlotStatus, String parkingSlotType, final ApiCallback<List<ParkingSlot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFreeParkingSlotsUsingGETValidateBeforeCall(lotId, parkingSlotStatus, parkingSlotType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ParkingSlot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
