/*
 * JParker REST API
 * An Open API for parking lot management
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@arielouziel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aouziel.jparker.client.api;

import com.aouziel.jparker.client.invoker.ApiCallback;
import com.aouziel.jparker.client.invoker.ApiClient;
import com.aouziel.jparker.client.invoker.ApiException;
import com.aouziel.jparker.client.invoker.ApiResponse;
import com.aouziel.jparker.client.invoker.Configuration;
import com.aouziel.jparker.client.invoker.Pair;
import com.aouziel.jparker.client.invoker.ProgressRequestBody;
import com.aouziel.jparker.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aouziel.jparker.client.model.ParkingLot;
import com.aouziel.jparker.client.model.ParkingSlot;
import com.aouziel.jparker.client.model.ParkingTicket;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ParkingLotControllerApi {
    private ApiClient localVarApiClient;

    public ParkingLotControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ParkingLotControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createParkingLot
     * @param parkingLot parkingLot (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParkingLotCall(ParkingLot parkingLot, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = parkingLot;

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createParkingLotValidateBeforeCall(ParkingLot parkingLot, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'parkingLot' is set
        if (parkingLot == null) {
            throw new ApiException("Missing the required parameter 'parkingLot' when calling createParkingLot(Async)");
        }
        

        okhttp3.Call localVarCall = createParkingLotCall(parkingLot, _callback);
        return localVarCall;

    }

    /**
     * Create a new parking lot
     * 
     * @param parkingLot parkingLot (required)
     * @return ParkingLot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ParkingLot createParkingLot(ParkingLot parkingLot) throws ApiException {
        ApiResponse<ParkingLot> localVarResp = createParkingLotWithHttpInfo(parkingLot);
        return localVarResp.getData();
    }

    /**
     * Create a new parking lot
     * 
     * @param parkingLot parkingLot (required)
     * @return ApiResponse&lt;ParkingLot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParkingLot> createParkingLotWithHttpInfo(ParkingLot parkingLot) throws ApiException {
        okhttp3.Call localVarCall = createParkingLotValidateBeforeCall(parkingLot, null);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new parking lot (asynchronously)
     * 
     * @param parkingLot parkingLot (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParkingLotAsync(ParkingLot parkingLot, final ApiCallback<ParkingLot> _callback) throws ApiException {

        okhttp3.Call localVarCall = createParkingLotValidateBeforeCall(parkingLot, _callback);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createParkingSlot
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slot slot (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParkingSlotCall(Long lotId, ParkingSlot slot, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = slot;

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/slots"
            .replaceAll("\\{" + "lotId" + "\\}", localVarApiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createParkingSlotValidateBeforeCall(Long lotId, ParkingSlot slot, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling createParkingSlot(Async)");
        }
        
        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling createParkingSlot(Async)");
        }
        

        okhttp3.Call localVarCall = createParkingSlotCall(lotId, slot, _callback);
        return localVarCall;

    }

    /**
     * Create a new slot in a parking lot
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slot slot (required)
     * @return ParkingSlot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ParkingSlot createParkingSlot(Long lotId, ParkingSlot slot) throws ApiException {
        ApiResponse<ParkingSlot> localVarResp = createParkingSlotWithHttpInfo(lotId, slot);
        return localVarResp.getData();
    }

    /**
     * Create a new slot in a parking lot
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slot slot (required)
     * @return ApiResponse&lt;ParkingSlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParkingSlot> createParkingSlotWithHttpInfo(Long lotId, ParkingSlot slot) throws ApiException {
        okhttp3.Call localVarCall = createParkingSlotValidateBeforeCall(lotId, slot, null);
        Type localVarReturnType = new TypeToken<ParkingSlot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new slot in a parking lot (asynchronously)
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slot slot (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createParkingSlotAsync(Long lotId, ParkingSlot slot, final ApiCallback<ParkingSlot> _callback) throws ApiException {

        okhttp3.Call localVarCall = createParkingSlotValidateBeforeCall(lotId, slot, _callback);
        Type localVarReturnType = new TypeToken<ParkingSlot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteParkingLot
     * @param lotId Parking lot id to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted parking lot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParkingLotCall(Long lotId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}"
            .replaceAll("\\{" + "lotId" + "\\}", localVarApiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteParkingLotValidateBeforeCall(Long lotId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling deleteParkingLot(Async)");
        }
        

        okhttp3.Call localVarCall = deleteParkingLotCall(lotId, _callback);
        return localVarCall;

    }

    /**
     * Delete a parking
     * 
     * @param lotId Parking lot id to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted parking lot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteParkingLot(Long lotId) throws ApiException {
        deleteParkingLotWithHttpInfo(lotId);
    }

    /**
     * Delete a parking
     * 
     * @param lotId Parking lot id to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted parking lot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteParkingLotWithHttpInfo(Long lotId) throws ApiException {
        okhttp3.Call localVarCall = deleteParkingLotValidateBeforeCall(lotId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a parking (asynchronously)
     * 
     * @param lotId Parking lot id to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted parking lot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteParkingLotAsync(Long lotId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteParkingLotValidateBeforeCall(lotId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterParkingLot
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param carPowerType carPowerType (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully picked the slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterParkingLotCall(Long lotId, String carPowerType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = carPowerType;

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/slot-uses"
            .replaceAll("\\{" + "lotId" + "\\}", localVarApiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterParkingLotValidateBeforeCall(Long lotId, String carPowerType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling enterParkingLot(Async)");
        }
        
        // verify the required parameter 'carPowerType' is set
        if (carPowerType == null) {
            throw new ApiException("Missing the required parameter 'carPowerType' when calling enterParkingLot(Async)");
        }
        

        okhttp3.Call localVarCall = enterParkingLotCall(lotId, carPowerType, _callback);
        return localVarCall;

    }

    /**
     * Put a car in a any free parking slot
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param carPowerType carPowerType (required)
     * @return ParkingTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully picked the slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public ParkingTicket enterParkingLot(Long lotId, String carPowerType) throws ApiException {
        ApiResponse<ParkingTicket> localVarResp = enterParkingLotWithHttpInfo(lotId, carPowerType);
        return localVarResp.getData();
    }

    /**
     * Put a car in a any free parking slot
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param carPowerType carPowerType (required)
     * @return ApiResponse&lt;ParkingTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully picked the slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParkingTicket> enterParkingLotWithHttpInfo(Long lotId, String carPowerType) throws ApiException {
        okhttp3.Call localVarCall = enterParkingLotValidateBeforeCall(lotId, carPowerType, null);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put a car in a any free parking slot (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param carPowerType carPowerType (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully picked the slot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enterParkingLotAsync(Long lotId, String carPowerType, final ApiCallback<ParkingTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterParkingLotValidateBeforeCall(lotId, carPowerType, _callback);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllParkingLots
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllParkingLotsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllParkingLotsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllParkingLotsCall(_callback);
        return localVarCall;

    }

    /**
     * View a list of all parking lots
     * 
     * @return List&lt;ParkingLot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ParkingLot> getAllParkingLots() throws ApiException {
        ApiResponse<List<ParkingLot>> localVarResp = getAllParkingLotsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View a list of all parking lots
     * 
     * @return ApiResponse&lt;List&lt;ParkingLot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ParkingLot>> getAllParkingLotsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllParkingLotsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ParkingLot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View a list of all parking lots (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllParkingLotsAsync(final ApiCallback<List<ParkingLot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllParkingLotsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ParkingLot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParkingLotById
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved parking lot </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParkingLotByIdCall(Long lotId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}"
            .replaceAll("\\{" + "lotId" + "\\}", localVarApiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParkingLotByIdValidateBeforeCall(Long lotId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling getParkingLotById(Async)");
        }
        

        okhttp3.Call localVarCall = getParkingLotByIdCall(lotId, _callback);
        return localVarCall;

    }

    /**
     * Get a parking lot by id
     * 
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @return ParkingLot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved parking lot </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ParkingLot getParkingLotById(Long lotId) throws ApiException {
        ApiResponse<ParkingLot> localVarResp = getParkingLotByIdWithHttpInfo(lotId);
        return localVarResp.getData();
    }

    /**
     * Get a parking lot by id
     * 
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @return ApiResponse&lt;ParkingLot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved parking lot </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParkingLot> getParkingLotByIdWithHttpInfo(Long lotId) throws ApiException {
        okhttp3.Call localVarCall = getParkingLotByIdValidateBeforeCall(lotId, null);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a parking lot by id (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking object will retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved parking lot </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParkingLotByIdAsync(Long lotId, final ApiCallback<ParkingLot> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParkingLotByIdValidateBeforeCall(lotId, _callback);
        Type localVarReturnType = new TypeToken<ParkingLot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParkingSlots
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParkingSlotsCall(Long lotId, String parkingSlotStatus, String parkingSlotType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/slots"
            .replaceAll("\\{" + "lotId" + "\\}", localVarApiClient.escapeString(lotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parkingSlotStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parkingSlotStatus", parkingSlotStatus));
        }

        if (parkingSlotType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parkingSlotType", parkingSlotType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParkingSlotsValidateBeforeCall(Long lotId, String parkingSlotStatus, String parkingSlotType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling getParkingSlots(Async)");
        }
        

        okhttp3.Call localVarCall = getParkingSlotsCall(lotId, parkingSlotStatus, parkingSlotType, _callback);
        return localVarCall;

    }

    /**
     * Get a list of free slots in a parking lot
     * 
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @return List&lt;ParkingSlot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ParkingSlot> getParkingSlots(Long lotId, String parkingSlotStatus, String parkingSlotType) throws ApiException {
        ApiResponse<List<ParkingSlot>> localVarResp = getParkingSlotsWithHttpInfo(lotId, parkingSlotStatus, parkingSlotType);
        return localVarResp.getData();
    }

    /**
     * Get a list of free slots in a parking lot
     * 
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @return ApiResponse&lt;List&lt;ParkingSlot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ParkingSlot>> getParkingSlotsWithHttpInfo(Long lotId, String parkingSlotStatus, String parkingSlotType) throws ApiException {
        okhttp3.Call localVarCall = getParkingSlotsValidateBeforeCall(lotId, parkingSlotStatus, parkingSlotType, null);
        Type localVarReturnType = new TypeToken<List<ParkingSlot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of free slots in a parking lot (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking slots will be retrieved (required)
     * @param parkingSlotStatus Specify parking slot status to be used (free, occupied) (optional)
     * @param parkingSlotType Specify parking slot type to be used (twentyKw, fiftyKw or sedan) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParkingSlotsAsync(Long lotId, String parkingSlotStatus, String parkingSlotType, final ApiCallback<List<ParkingSlot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParkingSlotsValidateBeforeCall(lotId, parkingSlotStatus, parkingSlotType, _callback);
        Type localVarReturnType = new TypeToken<List<ParkingSlot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveParkingLot
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully leaved the parking lot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveParkingLotCall(Long lotId, String ticketNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/tickets/{ticketNumber}/leave"
            .replaceAll("\\{" + "lotId" + "\\}", localVarApiClient.escapeString(lotId.toString()))
            .replaceAll("\\{" + "ticketNumber" + "\\}", localVarApiClient.escapeString(ticketNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveParkingLotValidateBeforeCall(Long lotId, String ticketNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling leaveParkingLot(Async)");
        }
        
        // verify the required parameter 'ticketNumber' is set
        if (ticketNumber == null) {
            throw new ApiException("Missing the required parameter 'ticketNumber' when calling leaveParkingLot(Async)");
        }
        

        okhttp3.Call localVarCall = leaveParkingLotCall(lotId, ticketNumber, _callback);
        return localVarCall;

    }

    /**
     * Remove car from parking lot and bill the customer
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @return ParkingTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully leaved the parking lot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public ParkingTicket leaveParkingLot(Long lotId, String ticketNumber) throws ApiException {
        ApiResponse<ParkingTicket> localVarResp = leaveParkingLotWithHttpInfo(lotId, ticketNumber);
        return localVarResp.getData();
    }

    /**
     * Remove car from parking lot and bill the customer
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @return ApiResponse&lt;ParkingTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully leaved the parking lot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParkingTicket> leaveParkingLotWithHttpInfo(Long lotId, String ticketNumber) throws ApiException {
        okhttp3.Call localVarCall = leaveParkingLotValidateBeforeCall(lotId, ticketNumber, null);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove car from parking lot and bill the customer (asynchronously)
     * 
     * @param lotId ParkingLot id from which parking slot will be retrieved (required)
     * @param ticketNumber Ticket number provided when entered the parking lot (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully leaved the parking lot </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Somebody took the slot before you </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Preconditions failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveParkingLotAsync(Long lotId, String ticketNumber, final ApiCallback<ParkingTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveParkingLotValidateBeforeCall(lotId, ticketNumber, _callback);
        Type localVarReturnType = new TypeToken<ParkingTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeParkingSlot
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slotId Slot id to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed slot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParkingSlotCall(Long lotId, Long slotId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/v1/parking-lots/{lotId}/slots/{slotId}"
            .replaceAll("\\{" + "lotId" + "\\}", localVarApiClient.escapeString(lotId.toString()))
            .replaceAll("\\{" + "slotId" + "\\}", localVarApiClient.escapeString(slotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeParkingSlotValidateBeforeCall(Long lotId, Long slotId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lotId' is set
        if (lotId == null) {
            throw new ApiException("Missing the required parameter 'lotId' when calling removeParkingSlot(Async)");
        }
        
        // verify the required parameter 'slotId' is set
        if (slotId == null) {
            throw new ApiException("Missing the required parameter 'slotId' when calling removeParkingSlot(Async)");
        }
        

        okhttp3.Call localVarCall = removeParkingSlotCall(lotId, slotId, _callback);
        return localVarCall;

    }

    /**
     * Remove a slot from a parking lot
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slotId Slot id to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed slot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public void removeParkingSlot(Long lotId, Long slotId) throws ApiException {
        removeParkingSlotWithHttpInfo(lotId, slotId);
    }

    /**
     * Remove a slot from a parking lot
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slotId Slot id to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed slot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeParkingSlotWithHttpInfo(Long lotId, Long slotId) throws ApiException {
        okhttp3.Call localVarCall = removeParkingSlotValidateBeforeCall(lotId, slotId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a slot from a parking lot (asynchronously)
     * 
     * @param lotId ParkingLot id where to add the slot (required)
     * @param slotId Slot id to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully removed slot </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The resource you were trying to reach is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParkingSlotAsync(Long lotId, Long slotId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeParkingSlotValidateBeforeCall(lotId, slotId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
