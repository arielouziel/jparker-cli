/*
 * JParker REST API
 * An Open API for parking lot management
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@arielouziel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aouziel.jparker.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.aouziel.jparker.client.model.ParkingSlot;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * ParkingTicket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-07-10T19:22:28.339+02:00[Europe/Paris]")
public class ParkingTicket {
  /**
   * The power type of the car using the slot
   */
  @JsonAdapter(CarPowerTypeEnum.Adapter.class)
  public enum CarPowerTypeEnum {
    TWENTYKW("twentyKw"),
    
    FIFTYKW("fiftyKw"),
    
    SEDAN("sedan");

    private String value;

    CarPowerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CarPowerTypeEnum fromValue(String text) {
      for (CarPowerTypeEnum b : CarPowerTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<CarPowerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarPowerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CarPowerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CarPowerTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_CAR_POWER_TYPE = "carPowerType";
  @SerializedName(SERIALIZED_NAME_CAR_POWER_TYPE)
  private CarPowerTypeEnum carPowerType;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_FORMATTED_PRICE = "formattedPrice";
  @SerializedName(SERIALIZED_NAME_FORMATTED_PRICE)
  private String formattedPrice;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_SLOT = "slot";
  @SerializedName(SERIALIZED_NAME_SLOT)
  private ParkingSlot slot = null;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public ParkingTicket carPowerType(CarPowerTypeEnum carPowerType) {
    this.carPowerType = carPowerType;
    return this;
  }

   /**
   * The power type of the car using the slot
   * @return carPowerType
  **/
  @ApiModelProperty(value = "The power type of the car using the slot")
  public CarPowerTypeEnum getCarPowerType() {
    return carPowerType;
  }

  public void setCarPowerType(CarPowerTypeEnum carPowerType) {
    this.carPowerType = carPowerType;
  }

  public ParkingTicket currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code for billed price
   * @return currencyCode
  **/
  @ApiModelProperty(value = "The currency code for billed price")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public ParkingTicket endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The time when occupation has ended
   * @return endTime
  **/
  @ApiModelProperty(value = "The time when occupation has ended")
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }

  public ParkingTicket formattedPrice(String formattedPrice) {
    this.formattedPrice = formattedPrice;
    return this;
  }

   /**
   * The billed price in human readable format
   * @return formattedPrice
  **/
  @ApiModelProperty(value = "The billed price in human readable format")
  public String getFormattedPrice() {
    return formattedPrice;
  }

  public void setFormattedPrice(String formattedPrice) {
    this.formattedPrice = formattedPrice;
  }

  public ParkingTicket id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The database generated slot occupation item ID
   * @return id
  **/
  @ApiModelProperty(value = "The database generated slot occupation item ID")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ParkingTicket number(String number) {
    this.number = number;
    return this;
  }

   /**
   * The ticket number
   * @return number
  **/
  @ApiModelProperty(value = "The ticket number")
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }

  public ParkingTicket price(Integer price) {
    this.price = price;
    return this;
  }

   /**
   * The billed price for this ticket
   * @return price
  **/
  @ApiModelProperty(value = "The billed price for this ticket")
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }

  public ParkingTicket slot(ParkingSlot slot) {
    this.slot = slot;
    return this;
  }

   /**
   * Get slot
   * @return slot
  **/
  @ApiModelProperty(value = "")
  public ParkingSlot getSlot() {
    return slot;
  }

  public void setSlot(ParkingSlot slot) {
    this.slot = slot;
  }

  public ParkingTicket startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The time when occupation has started
   * @return startTime
  **/
  @ApiModelProperty(value = "The time when occupation has started")
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParkingTicket parkingTicket = (ParkingTicket) o;
    return Objects.equals(this.carPowerType, parkingTicket.carPowerType) &&
        Objects.equals(this.currencyCode, parkingTicket.currencyCode) &&
        Objects.equals(this.endTime, parkingTicket.endTime) &&
        Objects.equals(this.formattedPrice, parkingTicket.formattedPrice) &&
        Objects.equals(this.id, parkingTicket.id) &&
        Objects.equals(this.number, parkingTicket.number) &&
        Objects.equals(this.price, parkingTicket.price) &&
        Objects.equals(this.slot, parkingTicket.slot) &&
        Objects.equals(this.startTime, parkingTicket.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carPowerType, currencyCode, endTime, formattedPrice, id, number, price, slot, startTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParkingTicket {\n");
    
    sb.append("    carPowerType: ").append(toIndentedString(carPowerType)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    formattedPrice: ").append(toIndentedString(formattedPrice)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    slot: ").append(toIndentedString(slot)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

